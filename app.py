import asyncio

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from PIL import Image, ImageDraw, ImageFont
from keyboards import *
from datetime import datetime
from interviewKeyboards import *
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher import DEFAULT_RATE_LIMIT
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import Throttled

import time
import os
import json
import requests
import random
import sqlite3 as sq

hookURL = 'https://hook.eu1.make.com/l22pqcigfqm286out21fe66axr0hq5mr'
victorinaHookURL = 'https://hook.eu1.make.com/68vjopg1h0anw104m24vrabymm3atuag'


class FSMtest(StatesGroup):
    start = State()
    getRealName = State()
    fork = State()
    newFork = State()

    interviewStart = State()
    interviewStep1 = State()
    interviewStep2 = State()
    interviewStep3 = State()
    interviewStep4 = State()
    interviewStep5 = State()
    interviewStep6 = State()
    interviewStep7 = State()
    interviewStep8 = State()
    interviewStep9 = State()
    interviewStep10 = State()
    interviewStep11 = State()
    interviewStep12 = State()
    interviewStepFinal = State()

    victorinaStart = State()
    victorinaStep1 = State()
    victorinaStep2 = State()
    victorinaStep3 = State()
    victorinaStep4 = State()
    victorinaStep5 = State()
    victorinaStep6 = State()
    victorinaStep7 = State()
    victorinaStep8 = State()
    victorinaStep9 = State()
    victorinaStep10 = State()
    victorinaStepFinal = State()

    getUserName = State()


checkList = []

storage = MemoryStorage()
bot = Bot(token='6004408832:AAGUScIPnYkCCg1GuMfxAbeiDpbsBkC-zvE')
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['menu'], state='*')
async def menu(message: types.Message):
    if message.from_user.id in checkList:
        await message.answer('<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å</b> –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=choose_kb, parse_mode='html')
        await FSMtest.fork.set()
    else:
        await message.answer('<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å</b> –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=loop_kb, parse_mode='html')
        await FSMtest.fork.set()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    checkList.append(message.from_user.id)
    await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π =)</b>\n–í–ø–∏—à–∏ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:',
                         parse_mode='html')
    await FSMtest.getRealName.set()


@dp.message_handler(state=FSMtest.getRealName)
async def gettingRealName(message: types.Message):
    try:
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

        data = {
            'date': f'{dt_string}',
            'username': f'{message.from_user.username}',
            'name': f'{message.text}',
            'id': f'{message.from_user.id}',
        }
        r = requests.post(hookURL, data=json.dumps(data), headers={'Content-Type': 'application/json'})

        image = Image.open(f"pics/{random.randrange(1, 10)}.png")

        font = ImageFont.truetype("font/BeelineSans-Regular.ttf", 64)
        drawer = ImageDraw.Draw(image)

        drawer.text((1190 // 2, 1385), message.text.upper(), anchor='mm', font=font, fill='white')

        image.save(f'peoplePics/new_{message.from_user.username}_img.png')

        #await message.answer('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º: —Å –∏–Ω—Ç–µ—Ä–≤—å—é –∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã?', reply_markup=choose_kb)

        photo = open('victorina/start.jpg', 'rb')
        await bot.send_photo(message.chat.id, photo=photo)

        await message.answer('<b>üëåüèª–°–µ–π—á–∞—Å –º—ã —Å–æ–±–µ—Ä–µ–º –Ω–∞—à –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –≤—ã–ø—É—Å–∫ BeeMAN!</b>\n –¢–µ–±—è –∂–¥–µ—Ç 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ '
            '—Ä–∞–∑–Ω—ã—Ö —Ä—É–±—Ä–∏–∫   –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º—É–∂—Å–∫–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤. –û—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –Ω–∏—Ö, —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é '
            '–æ–±–ª–æ–∂–∫—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –±—Ä—É—Ç–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑. \n\n–ü—Ä–∏–∑—ã –ø–æ–ª—É—á–∞—Ç 30 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–¥—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!\n<b>–ü–æ–µ—Ö–∞–ª–∏?</b>',
            reply_markup=start_kb, parse_mode='html')
        await FSMtest.victorinaStart.set()
    except:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=choose_kb)

    #await FSMtest.fork.set()


# @dp.callback_query_handler(state=FSMtest.fork)
# async def activityChoose(callback: types.CallbackQuery, state: FSMContext):
#     if callback.data == 'interview':
#         await callback.message.answer(
#             '<b>–ò–Ω—Ç–µ—Ä–≤—å—é - —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! </b>\n–°–µ–π—á–∞—Å –º—ã –∑–∞–¥–∞–¥–∏–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ '
#             '—Ç–≤–æ–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–º –≤–µ—á–µ—Ä–µ. –¢—ã –≤ –¥–µ–ª–µ? \n\n(–µ—Å–ª–∏ —á—Ç–æ, —Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é '
#             '–∫–æ–º–∞–Ω–¥–æ–π /menu)', reply_markup=start_kb, parse_mode='html')
#
#         await FSMtest.interviewStart.set()
#
#     elif callback.data == 'victorina':
#
#         photo = open('victorina/start.jpg', 'rb')
#         await bot.send_photo(callback.message.chat.id, photo=photo)
#
#         await callback.message.answer(
#             '<b>üëåüèª–°–µ–π—á–∞—Å –º—ã —Å–æ–±–µ—Ä–µ–º –Ω–∞—à –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –≤—ã–ø—É—Å–∫ BeeMAN!</b>\n –¢–µ–±—è –∂–¥–µ—Ç 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ '
#             '—Ä–∞–∑–Ω—ã—Ö —Ä—É–±—Ä–∏–∫   –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –º—É–∂—Å–∫–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤. –û—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –Ω–∏—Ö, —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é '
#             '–æ–±–ª–æ–∂–∫—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –±—Ä—É—Ç–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑. \n\n–ü—Ä–∏–∑—ã –ø–æ–ª—É—á–∞—Ç –ø–µ—Ä–≤—ã–µ 30 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–¥—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤—Ä–µ–º—è!\n<b>–ü–æ–µ—Ö–∞–ª–∏?</b>',
#             reply_markup=start_kb, parse_mode='html')
#         await FSMtest.victorinaStart.set()


@dp.callback_query_handler(state=FSMtest.victorinaStart)
async def victorina1Step(callback: types.CallbackQuery, state: FSMContext):
    now = datetime.now()
    dt_start = now.strftime("%d/%m/%Y %H:%M:%S")
    async with state.proxy() as data:
        data['counter'] = 0
        data['dateStart'] = dt_start

    photo = open('victorina/rubriks/question1.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)
    await callback.message.answer('1. –ö–∞–∫–∞—è –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ª—ë–≥–∫–æ–π –∞—Ç–ª–µ—Ç–∏–∫–∏ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –±—ã—Ç—å –æ–ª–∏–º–ø–∏–π—Å–∫–∏–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞?',
                                  reply_markup=victorina_kb1)
    await FSMtest.victorinaStep2.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep2)
async def victorina2Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–° 1900 –ø–æ 1920 –≥–æ–¥ <b>–ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–∞—Ç–∞</b> –±—ã–ª–æ –æ–¥–Ω–æ–π –∏–∑ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –ª–µ–≥–∫–æ–π –∞—Ç–ª–µ—Ç–∏–∫–∏. –í—Å–µ–≥–æ –∑–∞ —ç—Ç–æ ' \
                 '–≤—Ä–µ–º—è –±—ã–ª–æ —Ä–∞–∑—ã–≥—Ä–∞–Ω–æ –ø—è—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –æ–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –Ω–∞–≥—Ä–∞–¥. –ú–µ–¥–∞–ª–∏ –≤ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∑–∞–≤–æ—ë–≤—ã–≤–∞–ª–∏ ' \
                 '—à–≤–µ–¥—ã, –¥–∞—Ç—á–∞–Ω–µ, –∞–º–µ—Ä–∏–∫–∞–Ω—Ü—ã –∏ –∞–Ω–≥–ª–∏—á–∞–Ω–µ.'

    if callback.data == 'B':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic1.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question2.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer(
        '2. –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–∞–∑–≤–∞–Ω–Ω–æ–π –≤ –µ–≥–æ —á–µ—Å—Ç—å, –≤—ã–Ω—É–∂–¥–µ–Ω –±—ã–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ '
        '–Ω–µ–π –ø—Ä–æ—Å—Ç—ã–º –º–µ—Ö–∞–Ω–∏–∫–æ–º? ', reply_markup=victorina_kb2)

    await FSMtest.victorinaStep3.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep3)
async def victorina3Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–ò–Ω–∂–µ–Ω–µ—Ä –∏ –≥–æ–Ω—â–∏–∫ <b>–õ—É–∏ –®–µ–≤—Ä–æ–ª–µ</b> —Å—Ç–∞–ª —Å–æ–æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–Ω—Ü–µ—Ä–Ω–∞ Chevrolet –≤ 1911 –≥–æ–¥—É. –ß–µ—Ä–µ–∑ –ø—è—Ç—å –ª–µ—Ç –æ–Ω ' \
                 '–ø—Ä–æ–¥–∞–ª —Å–≤–æ—é –¥–æ–ª—é, –∞ –∑–∞—Ç–µ–º —É—á—Ä–µ–¥–∏–ª —Ä—è–¥ –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π. –í–æ –≤—Ä–µ–º—è –í–µ–ª–∏–∫–æ–π –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –õ—É–∏ ' \
                 '—Ä–∞–∑–æ—Ä–∏–ª—Å—è –∏ –±—ã–ª –≤—ã–Ω—É–∂–¥–µ–Ω —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –ø—Ä–æ—Å—Ç—ã–º –º–µ—Ö–∞–Ω–∏–∫–æ–º –Ω–∞ –∑–∞–≤–æ–¥ Chevrolet –≤ –î–µ—Ç—Ä–æ–π—Ç–µ.'

    if callback.data == 'A':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic2.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question3.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer('3. –ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –º—É–∂—Å–∫–∏–º? ',
                                  reply_markup=victorina_kb3)

    await FSMtest.victorinaStep4.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep4)
async def victorina4Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–≠—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, <b>–≥—Ä–∞–Ω–∞—Ç!</b>\n–û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∏—Ç–∞–º–∏–Ω –í1 (—Ç–∏–∞–º–∏–Ω), –º–Ω–æ–≥–æ –º–∞—Ä–≥–∞–Ω—Ü–∞, —Å–µ–ª–µ–Ω–∞, —Ç—Ä–∏–ø—Ç–æ—Ñ–∞–Ω–∞, ' \
                 '–±–µ–ª–∫–∞, –º–∞–≥–Ω–∏—è. –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º—É–∂—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤—Å–µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–º–∞. –ê ' \
                 '–µ—â–µ —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–æ–ª–µ–∑–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–º –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ —Å–∏–ª—å–Ω–æ–≥–æ ' \
                 '–ø–æ–ª–∞.'

    if callback.data == 'D':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic3.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question4.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer('4. –ö–∞–∫–æ–π –±—Ä–µ–Ω–¥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–∏–ª –º—É–∂—á–∏–Ω–∞–º –Ω–æ—Å–∏—Ç—å –Ω–æ—Å–∫–∏ —Å —Å–∞–Ω–¥–∞–ª–∏—è–º–∏? ',
                                  reply_markup=victorina_kb4)

    await FSMtest.victorinaStep5.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep5)
async def victorina5Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–ü–µ—Ä–≤—ã–º —ç—Ç–æ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –Ω–∞ –º–∏–ª–∞–Ω—Å–∫–æ–π –Ω–µ–¥–µ–ª–µ –º–æ–¥—ã –¢–æ–º–∞—Å –ú–∞–π–µ—Ä –∏–∑ <b>Bottega Veneta.</b>\n\n ' \
                 '–ü—Ä–æ–∏–∑–æ—à–ª–æ —ç—Ç–æ –≤ 2016 –≥–æ–¥—É. –¢–æ–≥–¥–∞ –∂–µ –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∞–ª–∏ —Ç–∞–∫–∏–µ –º–æ–¥–Ω—ã–µ –¥–æ–º–∞, –∫–∞–∫ Versace, ' \
                 'Kenzo, Marni –∏ Margaret Howell. –ê –º–æ–¥–Ω—ã–π –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å –¢–∏–º –ë–ª–∞–Ω–∫—Å –Ω–∞–∑–≤–∞–ª –Ω–æ—Å–∫–∏ —Å —Å–∞–Ω–¥–∞–ª–∏—è–º–∏ ' \
                 '–≥–ª–∞–≤–Ω—ã–º –æ–±—É–≤–Ω—ã–º —Ç—Ä–µ–Ω–¥–æ–º –≤–µ—Å–Ω—ã 2016!'

    if callback.data == 'C':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic4.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question5.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer('5. –° –∫–∞–∫–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º —á–∞—Å—Ç–æ —Ö–æ–¥—è—Ç –Ω–∞ —Ä—ã–±–∞–ª–∫—É –∂–∏—Ç–µ–ª–∏ –°—É–¥–∞–Ω–∞?',
                                  reply_markup=victorina_kb5)

    await FSMtest.victorinaStep6.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep6)
async def victorina6Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–ñ–∏—Ç–µ–ª–∏ –°—É–¥–∞–Ω–∞ –ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º <b>–±–∞—Ä–∞–±–∞–Ω–æ–º</b>, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∑–≤—É–∫–∏, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ ' \
                 '–ø–∞–¥–µ–Ω–∏–µ –¥–æ–∂–¥–µ–≤—ã—Ö –∫–∞–ø–µ–ª—å. –ü–æ–¥–¥–∞–≤—à–∏—Å—å –æ–±–º–∞–Ω—É, –ø—Ä–æ—Ç–æ–ø—Ç–µ—Ä—ã (–º–µ—Å—Ç–Ω–∞—è —Ä—ã–±–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–æ –≤—Ä–µ–º—è –∑–∞—Å—É—Ö–∏ ' \
                 '–∑–∞–∫–∞–ø—ã–≤–∞–µ—Ç—Å—è –≥–ª—É–±–æ–∫–æ –≤ –∏–ª) –ø—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è –∏ –∏–∑–¥–∞—é—Ç –≥—Ä–æ–º–∫–∏–π —á–º–æ–∫–∞—é—â–∏–π –∑–≤—É–∫, –≤—ã–¥–∞–≤–∞—è —Ç–µ–º —Å–∞–º—ã–º –º–µ—Å—Ç–æ ' \
                 '—Å–≤–æ–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è. –ê –ø–æ–¥—á–∞—Å –¥–∞–∂–µ –≤—ã–ø–æ–ª–∑–∞—é—Ç –Ω–∞—Ä—É–∂—É, –ø–æ–ø–∞–¥–∞—è –ø—Ä—è–º–æ –≤ —Ä—É–∫–∏ –ª–æ–≤—Ü–æ–≤.'

    if callback.data == 'D':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic5.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question6.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer(
        '6. –ö–∞–∫–æ–π –≤—É–∑ –†–æ—Å—Å–∏–∏ —Ä–µ—à–∏–ª –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –æ–±—É—á–µ–Ω–∏–µ?',
        reply_markup=victorina_kb6)

    await FSMtest.victorinaStep7.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep7)
async def victorina7Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = "–≠—Ç–æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≤—É–∑ - <b>–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤ –∏ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤.</b> \n–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ –≤ 2014 –≥–æ–¥—É. –°–æ–∏—Å–∫–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ, –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—Å—ã–ª–∞–ª—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Bitcoin-–∞–¥—Ä–µ—Å —Å —Ç–æ—á–Ω–æ–π —Å—É–º–º–æ–π –≤ BTC, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É."

    if callback.data == 'B':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic6.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question7.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer('7. –°–æ–≥–ª–∞—Å–Ω–æ –æ–ø—Ä–æ—Å–∞–º, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º—É–∂—á–∏–Ω –Ω–∞–∑—ã–≤–∞—é—Ç –≠–¢–û —Å–∞–º—ã–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –≤–æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∂–µ–Ω—â–∏–Ω—ã. \n–ß—Ç–æ –∂–µ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?',
                                  reply_markup=victorina_kb7)

    await FSMtest.victorinaStep8.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep8)
async def victorina8Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ –ø–æ—á—Ç–∏ –ø–æ–ª–æ–≤–∏–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (46%) —Å—á–∏—Ç–∞–µ—Ç —Å–∞–º–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π —á–∞—Å—Ç—å—é —Ç–µ–ª–∞ –∂–µ–Ω—â–∏–Ω—ã –µ—ë <b>–ª–∏—Ü–æ.</b> \n–î–∞–ª–µ–µ —Å–ª–µ–¥—É—é—Ç —è–≥–æ–¥–∏—Ü—ã (18%), –≤–æ–ª–æ—Å—ã (11%) –∏ ' \
                 '–Ω–æ–≥–∏ (9%).'

    if callback.data == 'A':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic7.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question8.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer('8. –ó–∞–∫–æ–Ω—á–∏ —Ñ—Ä–∞–∑—É –î–∂–µ–π—Å–æ–Ω–∞ –°—Ç—ç—Ç—Ö—ç–º–∞: ¬´–ö–∞–∫–æ–π —è ,–∫ —á–µ—Ä—Ç—É, –±—Ä–µ–Ω–¥? –ë—Ä–µ–Ω–¥ ‚Äì —ç—Ç–æ ...¬ª ',
                                  reply_markup=victorina_kb8)

    await FSMtest.victorinaStep9.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep9)
async def victorina9Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–°–∞–º—ã–π —Ü–∏—Ç–∏—Ä—É–µ–º—ã–π –º—É–∂—á–∏–Ω–∞ –ì–æ–ª–ª–∏–≤—É–¥–∞ —Å–∫–∞–∑–∞–ª: <b>¬´–ë—Ä–µ–Ω–¥ ‚Äì —ç—Ç–æ –ö–∏–º –ö–∞—Ä–¥–∞—à—å—è–Ω¬ª.</b> \n–≠—Ç–∞ —Ñ—Ä–∞–∑–∞ –≤–∑—è—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é ¬´–Ø –≤—Å—ë –¥–µ–ª–∞—é –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É¬ª, –¥–∞–Ω–Ω–æ–≥–æ –°—Ç—ç—Ç—Ö—ç–º–æ–º –∂—É—Ä–Ω–∞–ª—É ¬´–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è¬ª –≤ 2013 –≥–æ–¥—É.'

    if callback.data == 'C':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic8.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question9.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer(
        '9. –í —á—ë–º –∑–∞–∫–ª—é—á–∞–ª–∞—Å—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ–∫–æ—Ä–¥–∞ –î–∂–µ–π–º—Å–∞ –•–∞—Ä–≥–∏—Å–∞ –∏ –ß–∞—Ä–ª—å–∑–∞ –ö—Ä–µ–π—Ç–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–≤–æ—ë–º '
        '–ø—Ä–µ–æ–¥–æ–ª–µ–ª–∏ —Å–≤—ã—à–µ 11 —Ç—ã—Å—è—á –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –∏–∑ –ù—å—é-–ô–æ—Ä–∫–∞ –≤ –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å –∏ –æ–±—Ä–∞—Ç–Ω–æ?',
        reply_markup=victorina_kb9)

    await FSMtest.victorinaStep10.set()


@dp.callback_query_handler(state=FSMtest.victorinaStep10)
async def victorina10Step(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–î–∂–µ–π–º—Å –•–∞—Ä–≥–∏—Å –∏ –ß–∞—Ä–ª—å–∑ –ö—Ä–µ–π—Ç–æ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ–ª–∏ –≤—Å–µ 11 —Ç—ã—Å—è—á –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ <b>¬´–∑–∞–¥–Ω–∏–º —Ö–æ–¥–æ–º¬ª</b>. \n–≠—Ç–æ—Ç –Ω–µ–æ–±—ã—á–Ω–æ–µ ' \
                 '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å –≤ 1930 –≥–æ–¥—É.'

    if callback.data == 'D':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic9.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    photo = open('victorina/rubriks/question10.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer(
        '10. –ß—Ç–æ —É–º–µ–µ—Ç –Ω–æ–≤–∞—è —É–º–Ω–∞—è –¥—É—Ö–æ–≤–∫–∞ Haier CHEF@HOME, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ –±–µ—Ä–ª–∏–Ω—Å–∫–æ–π –≤—ã—Å—Ç–∞–≤–∫–µ IFA '
        '2022?',
        reply_markup=victorina_kb10)

    await FSMtest.victorinaStepFinal.set()


@dp.callback_query_handler(state=FSMtest.victorinaStepFinal)
async def victorinaFinalStep(callback: types.CallbackQuery, state: FSMContext):
    answerText = '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! –≠—Ç–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –¥—É—Ö–æ–≤–∫–∞ —Å –±–æ–ª—å—à–∏–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º —É–º–µ–µ—Ç <b>—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –±–ª—é–¥–∞</b>, –∫–æ—Ç–æ—Ä—ã–µ –≤ ' \
                 '–Ω–µ—ë –ø–æ—Å—Ç–∞–≤–∏–ª–∏. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ –ø–æ –¥–æ–º—É, –Ω–µ —Ç–∞–∫ –ª–∏?'

    if callback.data == 'A':
        async with state.proxy() as data:
            data['counter'] += 1
        await callback.message.answer('–ü—Ä–∞–≤–∏–ª—å–Ω–æ!')

    else:
        await callback.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç(')

    photo = open('victorina/answerPics/answerPic10.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption=answerText, parse_mode='html')

    await callback.message.answer(
        '<b>–£—Ä–∞, —Ç—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª! üèÜ</b> \n\n–¢—ã - –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤–æ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏ –Ω–∞—Å—Ç–æ—è—â–∞—è –∑–≤–µ–∑–¥–∞ –Ω–∞—à–µ–≥–æ –≤—ã–ø—É—Å–∫–∞!\n –°–º–æ—Ç—Ä–∏, –∫–∞–∫–∞—è –æ–±–ª–æ–∂–∫–∞ —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –ø–æ–ª—É—á–∏–ª–∞—Å—å:',
        parse_mode='html')

    photo = open(f'peoplePics/new_{callback.message.chat.username}_img.png', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    await callback.message.answer('üëåüèª<b>–û–±–ª–æ–∂–∫–∞ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –≥–æ—Ç–æ–≤–∞, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é!</b> –°–µ–π—á–∞—Å –º—ã –∑–∞–¥–∞–¥–∏–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–∑–Ω–∞–µ–º –æ —Ç–≤–æ–µ–º –∏–¥–µ–∞–ª—å–Ω–æ–º –≤–µ—á–µ—Ä–µ. –¢—ã –≤ –¥–µ–ª–µ? (–µ—Å–ª–∏ —á—Ç–æ, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ–π /menu)', parse_mode='html', reply_markup=loop_kb)
    os.remove(f'peoplePics/new_{callback.message.chat.username}_img.png')

    await FSMtest.interviewStart.set()


    async with state.proxy() as data:

        print("amount" + f'{data["counter"]}')
        print(data["dateStart"])

        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y %H:%M:%S")

        print(dt_string)

        dataToSend = {
            'username': f'{callback.message.chat.username}',
            'dateStart': f'{data["dateStart"]}',
            'dateEnding': f'{dt_string}',
            'id': f'{callback.message.chat.id}',
            'amount': f'{data["counter"]}',
        }
        r = requests.post(victorinaHookURL, data=json.dumps(dataToSend), headers={'Content-Type': 'application/json'})


# -----------------------------------------------------------------------------

@dp.callback_query_handler(state=FSMtest.interviewStart)
async def interViewStartStep(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['A'] = 0
        data['B'] = 0
        data['C'] = 0
        data['D'] = 0

    photo = open('interview/1.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption='–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å:', reply_markup=interview_kb1)
    await FSMtest.interviewStep1.set()


@dp.callback_query_handler(state=FSMtest.interviewStep1)
async def interView1Step(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    photo = open('interview/2.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption='–¢—ã –¥–æ—Å—Ç–∞–µ—à—å –∏–∑ —à–∫–∞—Ñ–∞:',
                         reply_markup=interview_kb2)

    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await FSMtest.interviewStep2.set()


@dp.callback_query_handler(state=FSMtest.interviewStep2)
async def interView2Step(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    photo = open('interview/3.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption='–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã—Ç—å:',
                         reply_markup=interview_kb3)

    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await FSMtest.interviewStep3.set()


@dp.callback_query_handler(state=FSMtest.interviewStep3)
async def interView3Step(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    photo = open('interview/4.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo, caption='–õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–µ—Ö–∞—Ç—å:',
                         reply_markup=interview_kb4)

    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await FSMtest.interviewStep4.set()


@dp.callback_query_handler(state=FSMtest.interviewStep4)
async def interView4Step(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    photo = open('interview/5.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await callback.message.answer('–ú—É–∑—ã–∫–∞ –¥–Ω—è:', reply_markup=interview_kb5)
    await FSMtest.interviewStep5.set()


@dp.callback_query_handler(state=FSMtest.interviewStep5)
async def interView5Step(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    photo = open('interview/6.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await callback.message.answer('–ü–æ –¥–æ—Ä–æ–≥–µ –Ω–∞–¥–æ –∑–∞—Å–∫–æ—á–∏—Ç—å:', reply_markup=interview_kb6)
    await FSMtest.interviewStep6.set()


@dp.callback_query_handler(state=FSMtest.interviewStep6)
async def interView6Step(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    photo = open('interview/7.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)

    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await callback.message.answer('–¢—ã –±—ã –Ω–µ —Ö–æ—Ç–µ–ª –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å:', reply_markup=interview_kb7)
    await FSMtest.interviewStep7.set()


@dp.callback_query_handler(state=FSMtest.interviewStep7)
async def interView7Step(callback: types.CallbackQuery, state: FSMContext):
    answer = callback.data
    photo = open('interview/8.jpg', 'rb')
    await bot.send_photo(callback.message.chat.id, photo=photo)
    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await callback.message.answer('–¢—ã –±—É–¥–µ—à—å –µ—Å—Ç—å:', reply_markup=interview_kb8)
    await FSMtest.interviewStep8.set()


@dp.callback_query_handler(state=FSMtest.interviewStep8)
async def interView8Step(call: types.CallbackQuery, state: FSMContext):
    answer = call.data
    photo = open('interview/9.jpg', 'rb')
    await bot.send_photo(call.message.chat.id, photo=photo)
    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await call.message.answer('–¢—ã –±—É–¥–µ—à—å –ø–∏—Ç—å:', reply_markup=interview_kb9)
    await FSMtest.interviewStep9.set()


@dp.callback_query_handler(state=FSMtest.interviewStep9)
async def interView9Step(call: types.CallbackQuery, state: FSMContext):
    answer = call.data
    photo = open('interview/10.jpg', 'rb')
    await bot.send_photo(call.message.chat.id, photo=photo)
    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await call.message.answer('–í–∏–¥ –∑–∞ –æ–∫–Ω–æ–º:', reply_markup=interview_kb10)
    await FSMtest.interviewStep10.set()


@dp.callback_query_handler(state=FSMtest.interviewStep10)
async def interView10Step(call: types.CallbackQuery, state: FSMContext):
    answer = call.data
    photo = open('interview/11.jpg', 'rb')
    await bot.send_photo(call.message.chat.id, photo=photo)
    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await call.message.answer('–¢—ã –±—ã —Ö–æ—Ç–µ–ª –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —Ä–∞–∑–≥–∞—Ä –≤–µ—á–µ—Ä–∞:', reply_markup=interview_kb11)
    await FSMtest.interviewStep11.set()


@dp.callback_query_handler(state=FSMtest.interviewStep11)
async def interView11Step(call: types.CallbackQuery, state: FSMContext):
    answer = call.data
    photo = open('interview/12.jpg', 'rb')
    await bot.send_photo(call.message.chat.id, photo=photo)
    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

    await call.message.answer('–ì–ª–∞–≤–Ω–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è:', reply_markup=interview_kb12)
    await FSMtest.interviewStep12.set()


@dp.callback_query_handler(state=FSMtest.interviewStep12)
async def interView12Step(call: types.CallbackQuery, state: FSMContext):
    answer = call.data
    async with state.proxy() as data:
        if answer == 'A':
            data['A'] += 1
        elif answer == 'B':
            data['B'] += 1
        elif answer == 'C':
            data['C'] += 1
        else:
            data['D'] += 1

        print(f"A:{data['A']}")
        print(f"B:{data['B']}")
        print(f"C:{data['C']}")
        print(f"D:{data['D']}")

        sum = {
            'A': f'{data["A"]}',
            'B': f'{data["B"]}',
            'C': f'{data["C"]}',
            'D': f'{data["D"]}',
        }

        answerTotal = max(sum, key=sum.get)
        print(answerTotal)

        if answerTotal == 'A':
            photo = open('interview/endPics/A.jpg', 'rb')
            await bot.send_photo(call.message.chat.id, photo=photo,
                                 caption='<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>üëèüèª \n\n–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –ø—Ä–æ–π–¥—ë—Ç –≤ '
                                         '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –±—É–¥–µ—Ç '
                                         '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ. –°–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ ‚Äí –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Ç–∞–º '
                                         '–±—ã–≤—à—É—é –∏–ª–∏ –Ω–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ –≥—Ä–µ–Ω–∫–∏ —Å '
                                         '—á–µ—Å–Ω–æ–∫–æ–º', parse_mode='html')

        elif answerTotal == 'B':
            photo = open('interview/endPics/B.jpg', 'rb')
            await bot.send_photo(call.message.chat.id, photo=photo, caption='<b>–û–≥–æ!</b>üëèüèª\n\n–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤–µ—Å—å–º–∞ —Å–µ—Ä—å—ë–∑–Ω–æ. –í–µ–¥—å '
                                                                            '—Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞ ‚Äí —ç—Ç–æ '
                                                                            '—Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞. –¢–æ–ª—å–∫–æ, '
                                                                            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∏ –Ω–µ –æ–±–æ–∂–≥–∏—Å—å '
                                                                            '–¥–æ—à–∏—Ä–∞–∫–æ–º!', parse_mode='html')

        elif answerTotal == 'C':
            photo = open('interview/endPics/C.jpg', 'rb')
            await bot.send_photo(call.message.chat.id, photo=photo,
                                 caption='<b>–û–≥–æ!</b>üëèüèª\n\n–°—É–¥—è –ø–æ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–∞–º, —Ç—ã —è–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è '
                                         '–Ω–∞–≤–µ—Å—Ç–∏—Ç—å —Ç—ë—â—É. –ß—Ç–æ –∂, —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫–æ–π –≤–µ—á–µ—Ä '
                                         '–∏–¥–µ–∞–ª—å–Ω—ã–º –ø–æ–¥ —Å–∏–ª—É —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ —Å–∞–º–æ–º—É. –£–¥–∞—á–∏! ', parse_mode='html')

        else:
            photo = open('interview/endPics/D.jpg', 'rb')
            await bot.send_photo(call.message.chat.id, photo=photo,
                                 caption='<b>–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</b> üëèüèª\n\n –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π '
                                         '–≤–µ—á–µ—Ä ‚Äí —à—É–º–Ω–∞—è —Ç—É—Å–∞ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –ª—é–±–∏–º–æ–º '
                                         '–±–∞—Ä–µ. –ù–æ –ø–æ–º–Ω–∏, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å '
                                         '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –±—ã–≤—à—É—é –∏ –º–∞—Ö–Ω—É—Ç—å –≤ –°—ã–∑—Ä–∞–Ω—å', parse_mode='html')

    photo = open('interview/endPics/cup.jpg', 'rb')
    await bot.send_photo(call.message.chat.id, photo=photo,
                         caption='–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Ç–∞–∫–∏–º, –∫–∞–∫–∏–º –∑–∞—Ö–æ—á–µ—à—å. '
                                 ' <b>–ú—ã –≤ –±–∏–ª–∞–π–Ω–µ —Ç–µ–±—è –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –∏ –ª—é–±–∏–º –∏–º–µ–Ω–Ω–æ –∑–∞ —ç—Ç–æ!</b> '
                                 '–õ–æ–≤–∏ –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å: https://t.me/addstickers/beemanpack', parse_mode='html')

    photo = open('victorina/endPic.jpg', 'rb')
    await bot.send_photo(call.message.chat.id, photo=photo)
    await state.finish()


executor.start_polling(dp, skip_updates=True)
